static void construct_Sigma_2(stout_notes_two_index * const trace_out, double const alpha, su3_outer const * const V2, stout_notes_tuple const * const trace_in)
{
  su3 ALIGN t1;
  su3 ALIGN t2;

  #pragma omp for private(t1, t2)
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int comp = 0; comp < hyp_perm_symm; ++comp)
    {      
      /* Calculate the right index in the 'outer' counting.
         Since this is a two-index affair, we can just use the
         symmetric values -- those are one-to-one equivalent.  */
      int const mu = hyp_comp_symm[comp].mu;
      int const nu = hyp_comp_symm[comp].nu;
      int const cnm = hyp_staple_symm[comp].cnm;
      
      /* Prefetch the indices */
      int const xpm   = g_iup[x][mu];
      int const xmn   = g_idn[x][nu];
      int const xpn   = g_iup[x][nu];
      int const xpmmn = g_idn[xpm][nu];
      
      /* Line 1 */
      _su3d_times_su3(t1, V2[xpn][comp], trace_in[x][nu].Z);
      _su3_times_su3(trace_out[x][comp].Sigma, V2[xpm][cnm], t1);
      
      /* Line 2 */
      _su3_times_su3(t1, trace_in[xmn][mu].Z, V2[xmn][cnm]);
      _su3d_times_su3_acc(trace_out[x][comp].Sigma, V2[xpmmn][cnm], t1);
      
      /* Line 3 */
      _su3_times_su3d(t1, V2[xpmmn][cnm], V2[x][comp]);
      _su3_times_su3(t2, V2[xmn][comp], t1);
      _su3_times_su3(t1, trace_in[xmn][nu].Z, t2);
      _su3d_times_su3(t2, V2[x][comp], t1);
      _su3_refac_acc(trace_out[x][comp].Sigma, -1.0, t2);
      
      /* Line 4 */
      _su3_times_su3d(t1, trace_in[xpm][nu].Z, V2[x][comp]);
      _su3_times_su3(t2, V2[xpm][comp], t1);
      _su3_times_su3(t1,V2[x][cnm] , t2);
      _su3d_times_su3(t2, V2[x][comp], t1);
      _su3_refac_acc(trace_out[x][comp].Sigma, -1.0, t2);       
      
      /* Line 5 */
      _su3_times_su3d(t1, trace_in[xpn][mu].Z, V2[x][cnm]);
      _su3_times_su3_acc(trace_out[x][comp].Sigma, V2[xpm][cnm], t1);
      
      /* Line 6 */
      _su3d_times_su3(t1, V2[xmn][comp], V2[xmn][cnm]);
      _su3_times_su3_acc(trace_out[x][comp].Sigma, trace_in[xpmmn][nu].Z, t1);
      
      _su3_refac_acc(trace_out[x][comp].Sigma, alpha, trace_out[x][comp].Sigma);
    }
}
