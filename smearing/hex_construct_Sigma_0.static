static void construct_Sigma_0(stout_notes_tuple *trace_out, double const alpha, su3_outer const *U, stout_notes_three_index *trace_in)
{
  su3 ALIGN t1;
  su3 ALIGN t2;
  
  #pragma omp for private(t1, t2)
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int comp = 0; comp < hyp_perm_full; ++comp)
    { 
      unsigned int mu = hyp_comp_full[comp].mu;

      /* Prefetch the indices */
      unsigned int xmn   = g_idn[x][nu];
      unsigned int xpn   = g_iup[x][nu];
      unsigned int xpm   = g_iup[x][mu];
      unsigned int xpmmn = g_idn[xpm][nu];
      
      /* Line 1 */
      _su3d_times_su3(t1, U[xpn][comp], trace_in[x][cnr].Z);
      _su3_times_su3(trace_out[x][comp].Sigma, U[xpm][cnmr], t1);
      
      /* Line 2 */
      _su3_times_su3(t1, trace_in[xmn][cmr].Z, U[xmn][cnmr]);
      _su3d_times_su3_acc(trace_out[x][comp].Sigma, U[xpmmn][cnmr], t1);
      
      /* Line 3 */
      _su3_times_su3d(t1, U[xpmmn][cnmr], U[x][comp]);
      _su3_times_su3(t2, U[xmn][comp], t1);
      _su3_times_su3(t1, trace_in[xmn][cnr].Z, t2);
      _su3d_times_su3(t2, U[x][comp], t1);
      _su3_refac_acc(trace_out[x][comp].Sigma, -1.0, t2);
      
      /* Line 4 */
      _su3_times_su3d(t1, trace_in[xpm][cnr].Z, U[x][comp]);
      _su3_times_su3(t2, U[xpm][comp], t1);
      _su3_times_su3(t1,U[x][cnmr] , t2);
      _su3d_times_su3(t2, U[x][comp], t1);
      _su3_refac_acc(trace_out[x][comp].Sigma, -1.0, t2);       
      
      /* Line 5 */
      _su3_times_su3d(t1, trace_in[xpn][cmr].Z, U[x][cnmr]);
      _su3_times_su3_acc(trace_out[x][comp].Sigma, U[xpm][cnmr], t1);
      
      /* Line 6 */
      _su3d_times_su3(t1, U[xmn][comp], U[xmn][cnmr]);
      _su3_times_su3_acc(trace_out[x][comp].Sigma, trace_in[xpmmn][cnr].Z, t1);
      
      _su3_refac_acc(trace_out[x][comp].Sigma, alpha, trace_out[x][comp].Sigma);
    }
}