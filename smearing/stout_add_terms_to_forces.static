static void inner_force_addition(su3 *t1, stout_notes_t * const notes, double const rho, su3 * const V)
{
  su3 ALIGN t2;

  _su3_times_su3(t2, notes->Z, notes->C);   /* t2 = Z * C */
  _su3_times_su3_acc(*t1, notes->Sigma, *V); /* t1 = Sigma * V */
  _su3_refac_acc(*t1, -rho, t2);                          /* t1 = Sigma * V - Z * C */
}

static void add_terms_to_forces_U(gauge_field_t smeared_force, gauge_field_t Sigma_U, gauge_field_t const U)
{
  su3 ALIGN t1;
  
#pragma omp for private(t1)
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int mu = 0; mu < 4; ++mu)
    {     
      /* t1 = Sigma * U */
      _su3_times_su3(t1, Sigma_U[x][mu], U[x][mu]);
      
      /* t1 = U * Sigma * U * U^dagger = U * Sigma */
      _su3_times_su3_acc(smeared_force[x][mu], U[x][mu], t1);
    }
}

static void add_terms_to_forces_V(gauge_field_t smeared_force, stout_notes_tuple *trace, double const rho, gauge_field_t V, gauge_field_t U)
{
  su3 ALIGN t1;
  su3 ALIGN t2;
  
#pragma omp for private(t1, t2)
  for (unsigned int x = 0; x < VOLUME; ++x)
    for (unsigned int mu = 0; mu < 4; ++mu)
    {
      inner_force_addition(&t1, &trace[x][mu], rho, &V[x][mu]);

      /* smeared_force = U * (Sigma * V - Z * C) * U^\dagger */
      _su3_times_su3d(t2, t1, U[x][mu]);
      _su3_times_su3(smeared_force[x][mu], U[x][mu], t2);
    }
}
